<div class="row-fluid">
  <div class="span12">
    <%= nav_bar do %>
      <% menu_group do %>
				<%= drop_down '<i class="icon-save icon-4x"></i>'.html_safe do %>
					<%= menu_item 'Upload as a new photo', '#' %>
					<%= menu_item 'Replace current photo' ,'#' %>
				<% end %>
        <%= menu_item '<i class="icon-crop icon-4x"></i>'.html_safe , '#', :id => 'crop'  %>
        <%= menu_item '<i class="icon-rotate-left icon-4x"></i>'.html_safe , '#', :id => 'rotate-left' %>
        <%= menu_item '<i class="icon-rotate-right icon-4x"></i>'.html_safe, '#', :id => 'rotate-right' %>
        <%= drop_down '<i class="icon-sun icon-4x"></i>'.html_safe do %>
            <li style="padding:3px 20px;">
              <div class="row-fluid slider" id="brightness-slider" style="margin:10px 0px;"></div>
							<div class="row-fluid">
								<%= text_field_tag 'brightness-value', 0 , :disabled => true %>
							</div>
            </li>
        <% end %>
        <%= drop_down '<i class="icon-adjust icon-4x"></i>'.html_safe do %> 
          <li style="padding:3px 20px;">
            <div class="slider" id="contrast-slider" style="margin: 10px 0px;"></div>
						<div class="row-fluid">
							<%= text_field_tag 'contrast-value', 0 , :disabled => true %>
						</div>
            </li>
        <% end %>
      <% end %>
    <% end %>
  </div>
</div>
<div class="row-fluid" id="crop-submenu" style="display:none;" x="0" y="0" x2="0" y2="0" >
  <%= nav_bar do %>
    <form class="navbar-form form-inline pull-left">
      <%= button_tag 'Done', :type=>'button' , :id => 'crop-done', :class=>'btn' %>
      <%= button_tag 'Cancel', :type=>'button' , :id => 'crop-cancel', :class=>'btn' %>
      <label class="checkbox">
        <%= check_box_tag 'crop-constraint-check' %> Aspect Ratio:
      </label>
      <%= select 'ratio', 'size', ['1x1','3x2', '4x3', '5x3', '5x4', '12x5', '16x9', '16x10'], 
        {}, {:disabled => 'disabled'} %>
      <div class="btn-group" data-toggle="buttons-radio" id="crop-orientation">
        <%= button_tag '<i class="icon-picture"></i> Landscape'.html_safe, :type => 'button', 
          :id => 'crop-landscape', :class => 'btn active', :disabled=>true %>
        <%= button_tag '<i class="icon-user"></i> Potrait'.html_safe, :type => 'button', 
          :id => 'crop-potrait', :class => 'btn' , :disabled=>true%>
      </div>
    </form>
  <% end %>
</div>
<div class="row-fluid" id="canvas-area">
  <% img = ::Magick::Image::read(@photo.avatar.large.path).first %>
  <canvas id="canvas" class="span12 img-polaroid" height="<%= img.rows %>" width="<%= img.columns %>" style="max-width:none; width:<%= img.columns %>px;" rotation=0 >
  </canvas>
</div>
<script type="text/javascript">
  //Canvas handle and other variables
  var canvas = document.getElementById('canvas');
  var ctx = canvas.getContext('2d');
  var origImageData, initData , imageDataDelta;
  var img;
  var jcrop_api, canvas_obj;

  //load init image
  theCanvas = {};

  //reset the canvas
  theCanvas.reset = function(){
    //redraw the original image and crop if required	
    canvas = document.getElementById('canvas');

    ctx = canvas.getContext('2d');
    ctx.clearRect(0,0, canvas.width, canvas.height);
    img = new Image();
    img.src = '<%= @photo.avatar.large.url %>';
      $('#canvas').css('width', img.width);
      $('#canvas').css('height', img.height);
      canvas.width = img.width;
      canvas.height = img.height;
    img.onload = function(){
      ctx.drawImage(img, 0,0);
    };
    canvas_obj = $('#canvas').first();
  };
  
  //first boot. load properly
  theCanvas.firstBoot = function(){
    img = new Image();
    img.src = '<%= @photo.avatar.large.url %>';
    canvas = document.getElementById('canvas');
    ctx = canvas.getContext('2d');
    img.onload = function(){
      ctx.drawImage(img, 0, 0);
      theCanvas.setInitData();
        $('#crop-cancel').attr('x', 0);
	$('#crop-cancel').attr('y', 0);
	$('#crop-cancel').attr('x2', img.width);
	$('#crop-cancel').attr('y2', img.height);
    }; 
  };

  //set the init data. usually called after the image has been loaded or cropped
  theCanvas.setInitData = function(){
    imageData = ctx.getImageData(0,0, canvas.width, canvas.height);
    initData = new Array(imageData.data)[0];
  };

  
  theCanvas.toggleMainMenu = function(){
    //toggle main menu functions (enable or disable them)
    $('.icon-sun').parent().toggleClass('disabled');
    $('.icon-adjust').parent().toggleClass('disabled');
    $('.icon-rotate-right').parent().toggleClass('disabled');
    $('.icon-rotate-left').parent().toggleClass('disabled');
    $('.icon-save').parent().toggleClass('disabled');

    //check if the crop-submenu is closed and the check box is checked, then uncheck it
    if ( !$('icon-crop').parent().parent().hasClass('active') && 
      $('#crop-submenu form input:checked').length != 0 ){
      //console.log('clicked');
      $('#crop-constraint-check').click();
    }
  };

  //if canceld or toggle is pressed, re-hide the submenu
  // and restore the picture and crop it if required
  // and applied the  
  function cancel_crop(){
    //need to reset when they cropped it
    $('#crop').parent().removeClass('active');
    $('#crop-submenu').css('display', 'none');  
    jcrop_api.destroy();
    canvas_obj.attr('style', '');
    $('#canvas-area').append(canvas_obj);

    //crop back the picture
  };

  //convey the x,y and x2,y2 coordinates to the crop-submenu for tracking
  function updateCoor(c){
    $('#crop-submenu').attr('x', c.x);
    $('#crop-submenu').attr('y', c.y);
    $('#crop-submenu').attr('x2', c.x2);
    $('#crop-submenu').attr('y2', c.y2);
  };


  //toggle crop
  $('#crop').click( function(){
    $('#crop').parent().toggleClass('active');
    if ( $('#crop').parent().hasClass('active') ) {
			//capture original crop co-ordinates if it's not full screen
			if ( $('#crop-submenu').attr('x') != $('#crop-submenu').attr('x2') ) {
				$('#crop-cancel').attr('x', $('#crop-submenu').attr('x') );
				$('#crop-cancel').attr('y', $('#crop-submenu').attr('y') );
				$('#crop-cancel').attr('x2', $('#crop-submenu').attr('x2') );
				$('#crop-cancel').attr('y2', $('#crop-submenu').attr('y2') );
			};

      //reload from orignal image
      theCanvas.reset();

      //properly set the brightness and contrast
      theCanvas.setInitData();
      newData = Filters.filterImage( 
        Filters.brightnessAndContrast, document.getElementById('canvas'), 
        $('#brightness-slider').slider('option', 'value'), $('#contrast-slider').slider('option', 'value') 
      );
      ctx.putImageData(newData, 0,0);

      //display the submenu and the crop square
      $('#crop-submenu').css('display', 'block');  
      jcrop_api = $.Jcrop('#canvas', { minSize:[150,150], allowSelect:false, 
        setSelect:[
          $('#crop-submenu').attr('x'), $('#crop-submenu').attr('y'), 
          $('#crop-submenu').attr('x2'), $('#crop-submenu').attr('y2')
        ],
        onChange: updateCoor }
      );

      theCanvas.toggleMainMenu();
    } else {
      cancel_crop();
      theCanvas.crop( true );

      theCanvas.toggleMainMenu();
    }
  });

  //handle when aspect ratio is selected
  $('#crop-constraint-check').change( function(){
    if ( $('#crop-submenu form input:checked').length) {
      //set aspect ratio to the crop square
      ratio = $('#ratio_size').val().split('x');
      jcrop_api.setOptions({ aspectRatio: ratio[0] / ratio[1] });  
      $('#ratio_size').prop('disabled', false);
      $('#crop-orientation button').prop('disabled', false);
    } else {
      //unset aspect ratio to the crop square
      jcrop_api.setOptions({ aspectRatio: null });
      $('#ratio_size').prop('disabled', true);
      $('#crop-orientation button').prop('disabled', true);
    };
  });

  //handle when aspect ratio select is changed
  $('#ratio_size').change( function(){
    ratio = $('#ratio_size').val().split('x'); 
    jcrop_api.setOptions({ aspectRatio: ratio[0] / ratio[1] });
  });

  //handle when crop square orientation changed
  $('#crop-orientation button').click( function() {
    //flip each
    $('#ratio_size option').each( function(){
      ratio = $(this).val().split('x');
      $(this).val( ratio[1] + 'x' + ratio[0] );
      $(this).text( ratio[1] + 'x' + ratio[0] );
    });

    //reset the aspect ratio
    newRatio = $('#ratio_size option:selected').val().split('x'); 
    jcrop_api.setOptions({ aspectRatio: newRatio[0]/newRatio[1] });
  });

  theCanvas.crop = function( cancel ){
    //crop the picture out
    if ($('#crop-submenu').attr('x') != $('#crop-submenu').attr('x2') ){
			if (cancel) {
				//crop to original image or orignal crop if cancelled
				newHeight = parseInt($('#crop-cancel').attr('y2') - $('#crop-cancel').attr('y'));
				newWidth = parseInt($('#crop-cancel').attr('x2') - $('#crop-cancel').attr('x'));
				startX = $('#crop-cancel').attr('x');
				startY = $('#crop-cancel').attr('y');

				//reset crop position
				$('#crop-submenu').attr('x', $('#crop-cancel').attr('x') );
				$('#crop-submenu').attr('x2', $('#crop-cancel').attr('x2') );
				$('#crop-submenu').attr('y', $('#crop-cancel').attr('y') );
				$('#crop-submenu').attr('y2', $('#crop-cancel').attr('y2') );
			} else {
				newHeight = parseInt($('#crop-submenu').attr('y2') - $('#crop-submenu').attr('y'));
				newWidth = parseInt($('#crop-submenu').attr('x2') - $('#crop-submenu').attr('x'));
				startX = $('#crop-submenu').attr('x');
				startY = $('#crop-submenu').attr('y');
			};

			//console.log('newHeight =' + newHeight);

      $('#canvas').css('width', newWidth);
      $('#canvas').css('height', newHeight);
      canvas.height = newHeight;
      canvas.width = newWidth;
      ctx.clearRect(0,0, newWidth, newHeight);
    
      ctx.drawImage(img, 
				startX, startY,
        newWidth, newHeight, 
        0, 0, 
        newWidth, newHeight
      );

      //reset the initData to the cropped pic
      theCanvas.setInitData();
      newData = Filters.filterImage( 
        Filters.brightnessAndContrast, document.getElementById('canvas'), 
        $('#brightness-slider').slider('option', 'value'), $('#contrast-slider').slider('option', 'value') 
      );
      ctx.putImageData(newData, 0,0);
    }
  }

	theCanvas.rotate = function(direction){
    newData = new Array(initData.length);
		if(direction == 'left') {
      $('#canvas').attr('rotation', $('#canvas').attr('rotation') == '0' ? '270' : $('#canvas').attr('rotation') - 90);
		} else if (direction == 'right') {
      $('#canvas').attr('rotation', $('#canvas').attr('rotation') == '360' ? '0' : parseInt($('#canvas').attr('rotation')) + 90);
		}
    
    //setup new dimension and resize the canvas
    newWidth = canvas.height;
    newHeight = canvas.width;

    canvas.width = newWidth;
    canvas.height = newHeight;

    //rotate the canvas at center point
    ctx.translate(newWidth/2, newHeight/2);
    ctx.rotate( (Math.PI/180) * parseInt( $('#canvas').attr('rotation') ) );

    //redraw the image
    //TODO: fix this to redraw based on the cropped area
    ctx.drawImage(img, -img.width/2,-img.height/2);
    //TODO: apply brightness/contrast modifiers

    ctx.restore;
  

    return newData;
	}
  
  //done cropping
  $('#crop-done').click( function(){
    //remove the jcrop api
    cancel_crop();
    theCanvas.crop();
    theCanvas.toggleMainMenu();
  });

  //cancel cropping
  $('#crop-cancel').click( function(){
    cancel_crop();
    theCanvas.crop(true );
    theCanvas.toggleMainMenu();
  });

  //setup for rotate
  $('#rotate-left').click( function(){
		theCanvas.rotate('left');
  });

  $('#rotate-right').click( function(){
		theCanvas.rotate('right');
  });

  //setup the sliders for brightness and contrast
  $('.slider').slider({ value:0, min:-128, max:128 });
  $('#brightness-slider').on('slide', function(event, ui){
    $('#brightness-value').val(ui.value);
    newData = Filters.filterImage( 
      Filters.brightnessAndContrast, document.getElementById('canvas'), 
      ui.value, $('#contrast-slider').slider('option', 'value') 
    );
    ctx.putImageData(newData, 0,0);
  } );

  $('#contrast-slider').on('slide', function(event, ui){
    $('#contrast-value').val(ui.value);
    newData = Filters.filterImage( 
      Filters.brightnessAndContrast, document.getElementById('canvas'), 
      $('#brightness-slider').slider('option', 'value'), ui.value
    );
    ctx.putImageData(newData, 0,0);
  } );

  // see http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
  Filters = {};

  Filters.getPixels = function(){
    //return c.getContext('2d').getImageData(0,0, c.width, c.height);
    origImageData = ctx.getImageData(0,0, canvas.width, canvas.height);
    for( i=0; i<initData.length; i++){
      origImageData.data[i] = initData[i];
    }
    return origImageData;
  };

  Filters.filterImage = function(filter, var_args){
    var args = [Filters.getPixels()];
    for (var i=2; i < arguments.length; i++){
      args.push(arguments[i]);
    }
  
    return filter.apply(null, args);
  };

  //brightness and contrast filters
  Filters.brightnessAndContrast = function(pixels, brightnessAdjustment, contrastAdjustment){
    //console.log('brightness: ' + brightnessAdjustment + ' contrast: ' + contrastAdjustment);
    var d = pixels.data;
    var contrastFactor = contrastAdjustment == 0 ? 1 : (259 * (contrastAdjustment + 255))/(255 * (259 - contrastAdjustment));
    for (var i =0; i < d.length; i+=4){
      d[i] = (contrastFactor * ( d[i] - 128 ) + 128) + brightnessAdjustment;
      d[i+1] = (contrastFactor * ( d[i+1] - 128 ) + 128) + brightnessAdjustment;
      d[i+2] = (contrastFactor * ( d[i+2] - 128 ) + 128) + brightnessAdjustment;
    }
    return pixels;
  }

  $(document).ready( function(){
    //setup the canvas
    theCanvas.firstBoot();
  });
</script> 
